#include <iostream>
#include <string>
using namespace std;

//1. 부모의 접근지정자가 protected. 자식의 접근 지정자가 public일때.
// protected는 부모 클래스 본인과 자식 클래스 내부에서 접근이 가능하다. 외부에서 접근이 불가하다. 
// 해결 방법: 자식 클래스를 통해 부모 클래스에 접근.
/*
// 부모 클래스 (기반 클래스)
class Person {
protected:
	string name;
	int age;

	Person(string n, int a) : name(n), age(a) {}

	void introduce() {
		cout << "이름: " << name << ", 나이: " << age << endl;
	}
};

// 자식 클래스 (파생 클래스)
class Student : protected Person {
private:
	string major;

public:
	Student(string n, int a, string m) : Person(n, a), major(m) {}

	void study() {
		cout << name << " 학생이 " << major << " 전공 공부 중입니다." << endl;
	}

	void introduce() { 
		Person::introduce();
	}
};

int main() {
	Student s("홍길동", 21, "컴퓨터공학");
	s.introduce();   // 부모 클래스 함수 사용
	s.study();       // 자식 클래스 함수 사용
	return 0;
}
*/

//1-2. 부모의 접근지정자가 protected이고 자식의 접근 지정자가 protected일때.
// protected는 부모 클래스 본인과 자식 클래스 내부에서 접근이 가능하다. 외부에서 접근이 불가하다. 
// 해결 방법: 프렌즈함수나 get함수를 이용하여 외부에서 접근 가능하게 만든다.
/*
// 부모 클래스 (기반 클래스)
class Person {
protected:
	string name;
	int age;

	Person(string n, int a) : name(n), age(a) {}

	void introduce() {
		cout << "이름: " << name << ", 나이: " << age << endl;
	}

	string getName() const { return name; }
	int getAge() const { return age; }
	void setName(const string& n) { name = n; }
	void setAge(int a) { age = a; }
};

// 자식 클래스 (파생 클래스)
class Student : protected Person {
protected:
	string major;

	void study() {
		cout << getName() << " 학생이 " << major << " 전공 공부 중입니다." << endl;
	}

	void introduce() {
		Person::introduce();
	}

public:
	Student(string n, int a, string m) : Person(n, a), major(m) {} //프로텍티드, 프라이빗은 외부에서 접근이 불가하므로 main에서 접근하고 싶다면 퍼블릭으로 만들어야함

	void show() { introduce(); study(); }
};

int main() {
	Student s("홍길동", 21, "컴퓨터공학");
	//s.introduce();   // 부모 클래스 함수 사용
	//s.study();       // 자식 클래스 함수 사용
	s.show();
	return 0;
}
*/

//1-3. 부모의 접근지정자가 protected이고 자식의 접근 지정자가 private일때.
// private 상속이면 부모의 public/protected 멤버들이 자식 내부에서 private처럼 취급된다.
// 해결 방법: 프렌즈함수나 get함수를 이용하여 외부에서 접근 가능하게 만든다.
/*
// 부모 클래스 (기반 클래스)
class Person {
protected:
	string name;
	int age;

	Person(string n, int a) : name(n), age(a) {}

	void introduce() {
		cout << "이름: " << name << ", 나이: " << age << endl;
	}

};

// 자식 클래스 (파생 클래스)
class Student : protected Person {
private:
	string major;

	void study() {
		cout << name << " 학생이 " << major << " 전공 공부 중입니다." << endl;
	}

	void introduce() {
		Person::introduce();
	}

public:
	Student(string n, int a, string m) : Person(n, a), major(m) {} //프로텍티드, 프라이빗은 외부에서 접근이 불가하므로 main에서 접근하고 싶다면 퍼블릭으로 만들어야함

	void show() { introduce(); study(); }
};

int main() {
	Student s("홍길동", 21, "컴퓨터공학");
	//s.introduce();   // 부모 클래스 함수 사용
	//s.study();       // 자식 클래스 함수 사용
	s.show();
	return 0;
}
*/

//2. 부모의 접근지정자가 private이고 자식의 접근 지정자가 public일때.
// private은 부모 클래스 본인을 제외한 자식클래스나 외부에서 접근이 불가하다.
// 해결 방법: 꼭 고치고 싶다면 프라이빗을 프로텍트로 바꾸고 프렌즈함수나 get함수를 이용하여 외부에서 접근 가능하게 만든다.
/*
// 부모 클래스 (기반 클래스)
class Person {
private:
	string name;
	int age;

protected:
	// 생성자 protected → 자식 클래스에서 호출 가능
	Person(string n, int a) : name(n), age(a) {}

	// 부모 private 멤버 접근용 getter
	string getName() const { return name; }
	int getAge() const { return age; }

	// introduce도 protected로 변경 (자식 클래스에서 호출 가능)
	void introduce() {
		cout << "이름: " << name << ", 나이: " << age << endl;
	}
};

// 자식 클래스 (파생 클래스)
class Student : private Person {
private:
	string major;

public:
	Student(string n, int a, string m) : Person(n, a), major(m) {}

	void study() {
		cout << getName() << " 학생이 " << major << " 전공 공부 중입니다." << endl;
	}

	void introduce() {
		Person::introduce();
	}
};

int main() {
	Student s("홍길동", 21, "컴퓨터공학");
	s.introduce();   // 부모 클래스 함수 사용
	s.study();       // 자식 클래스 함수 사용
	return 0;
}
*/

//2-2. 부모의 접근지정자가 private이고 자식의 접근 지정자가 protected일때.
// private은 부모 클래스 본인을 제외한 자식클래스나 외부에서 접근이 불가하다.
// 해결 방법:꼭 고치고 싶다면 부모 클래스의 접근지정자를 프라이빗을 프로텍트로 바꾸고 프렌즈함수나 get함수를 이용하여 외부에서 접근 가능하게 만든다.
/*
// 부모 클래스 (기반 클래스)
class Person {
private:
	string name;
	int age;

protected:
	Person(string n, int a) : name(n), age(a) {}

	string getName() const { return name; }
	int getAge() const { return age; }

	void introduce() {
		cout << "이름: " << name << ", 나이: " << age << endl;
	}
};

// 자식 클래스 (파생 클래스)
class Student : private Person {
private:
	string major;

protected:

	void study() {
		cout << getName() << " 학생이 " << major << " 전공 공부 중입니다." << endl;
	}

	void introduce() {
		Person::introduce();
	}

public:

	Student(string n, int a, string m) : Person(n, a), major(m) {}

	void show() { introduce(); study(); }
};

int main() {
	Student s("홍길동", 21, "컴퓨터공학");
	//s.introduce();   // 부모 클래스 함수 사용
	//s.study();       // 자식 클래스 함수 사용
	s.show();
	return 0;
}
*/


//2-3. 부모의 접근지정자가 private이고 자식의 접근 지정자가 private일때.
// private은 부모 클래스 본인을 제외한 자식클래스나 외부에서 접근이 불가하다.
// 해결 방법: 프렌즈함수나 get함수를 이용하여 외부에서 접근 가능하게 만든다.
/*
// 부모 클래스 (기반 클래스)
class Person {
private:
	string name;
	int age;

protected:
	Person(string n, int a) : name(n), age(a) {}

	string getName() const { return name; }
	int getAge() const { return age; }

	void introduce() {
		cout << "이름: " << name << ", 나이: " << age << endl;
	}
};

// 자식 클래스 (파생 클래스)
class Student : private Person {
private:
	string major;

protected:
	void study() {
		cout << getName() << " 학생이 " << major << " 전공 공부 중입니다." << endl;
	}

	void introduce() {
		Person::introduce();
	}

public:
	Student(string n, int a, string m) : Person(n, a), major(m) {}

	void show() {
		introduce();
		study();
	}
};

int main() {
	Student s("홍길동", 21, "컴퓨터공학");
	//s.introduce();   // 부모 클래스 함수 사용
	//s.study();       // 자식 클래스 함수 사용
	s.show();
	return 0;
}
*/

/*
//<다중 상속>: 둘 이상의 부모 클래스를 가지는 것.
//Q. 두 부모 클래스에 동일한 이름의 멤버함수가 있는 경우. 해결하는 방법 생각해보기
class Teacher {
public:
	void teach() {
		cout << "강의를 하고 있습니다." << endl;
	}
	void Paper() {
		cout << "학술 논문을 씁니다." << endl;
	}
};

class Researcher {
public:
	void research() {
		cout << "연구를 하고 있습니다." << endl;
	}
	void Paper() {
		cout << "연구 논문을 씁니다." << endl;
	}
};

// 다중 상속
class Professor : public Teacher, public Researcher {
public:
	void introduce() {
		cout << "저는 교수입니다." << endl;
	}
};

int main() {
	Professor p;
	p.introduce();
	p.teach();
	p.research();
	//p.Paper();
	p.Teacher::Paper(); //어느 부모 클래스의 멤버함수를 사용하는 것인지 명시한다.
	p.Researcher::Paper();
	return 0;
}
*/
